URL: https://github.com/kaylaniBatin/DI-Bootcamp/blob/main/W2/exercisexp.py
suggestions for improvement:
- In `find_oldest_cat`, the parameter `oragne_cat` has a typo. It should be `orange_cat`.
- The `Cat` class should handle age as an integer, not a string.  Casting to int in the `__init__` method or checking type would improve correctness and prevent errors.
- Add docstrings to all functions to explain their purpose, parameters, and return values. This significantly improves readability.
- The `find_oldest_cat` function could be more concise and efficient using a list and `max()` function. This improves readability and performance.
- In the Dog class, 'wolf' in bark() should be 'woof'.
- Improve variable naming for clarity (e.g., `sara_dog` to `sarahs_dog`).
- In the Zoo class, the `get_groups()` method unnecessarily calls `sort_animals()` if `self.groups` is empty.  It should only sort if needed, for efficiency.
Brief justification:
- correctness: The code mostly fulfills the requirements of the exercises. The Cat exercise correctly identifies and prints the oldest cat (barring the typo). The Dog exercise correctly creates objects, calls methods and compares sizes. The Song exercise correctly prints lyrics line by line.  The Zoo exercise correctly implements adding, selling, getting, sorting, and grouping animals;  however, minor issues exist in the function implementations as noted in the feedback.
- readability: The code is generally readable, but some improvements can be made.  Docstrings are missing, which makes understanding the purpose of some methods harder. Variable names are mostly clear but could be better in some places. Some functions could be simplified for better readability.
- performance: The performance of the code is reasonably good. However, there are efficiency improvements that can be done. The `find_oldest_cat` function could be made more efficient using built-in functions. The unnecessary sorting in the Zoo class also impacts efficiency slightly.
- security: No major security flaws are present in the code. It does not handle user input or interact with external resources in a way that could introduce vulnerabilities.

