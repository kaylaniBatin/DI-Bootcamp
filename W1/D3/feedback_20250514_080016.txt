URL: https://github.com/kaylaniBatin/DI-Bootcamp/blob/main/W1/D3/dailychallenge.py
suggestions for improvement:
- Challenge 1: The code for Challenge 1 correctly implements the functionality described in the chapter content.  However, it could benefit from using the `setdefault` method for cleaner dictionary updates.
- Challenge 2: The code for Challenge 2 mostly works correctly, but the repeated `price = int(price)` is redundant.  Error handling for non-numeric price values should be added. The input validation for `wallet` could be more robust.
- Both Challenges: Add docstrings to functions (although these are not functions here) to improve readability and explain the purpose of the code snippets.
- Challenge 2: Consider using a more descriptive variable name than `basket` (e.g., `affordable_items`).
Brief justification:
- correctness: Challenge 1's code accurately creates the dictionary of letter indices as specified.  Challenge 2's code correctly identifies affordable items, sorts them, and handles the 'Nothing' case for most inputs. Minor improvements in input handling and error management are needed for full correctness.
- readability: The code is generally easy to follow but could be improved with better variable names (e.g., in Challenge 2) and the use of more concise methods (like `setdefault` in Challenge 1).  Adding docstrings would greatly enhance readability. The repeated `price = int(price)` in Challenge 2 reduces readability.
- performance: The performance of both code snippets is reasonable for the given task.  The use of `replace` and `int` is efficient for string manipulation and type conversion. The nested loops in challenge 2 could be optimized with a more efficient approach, however the current complexity is not alarming for these small inputs.
- security: The code does not have any obvious security vulnerabilities.  No user input is directly used in a way that could lead to vulnerabilities (such as SQL injection or command injection).

